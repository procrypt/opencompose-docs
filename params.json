{
  "name": "Opencompose-docs",
  "tagline": "docs and html file",
  "body": "<h1>OpenCompose Specification</h1>\r\n</div>\r\n<div id=\"content\">\r\n<h1 id=\"_wip_this_document_is_under_heavy_modification\" class=\"sect0\">WIP : This document is under heavy modification.</h1>\r\n\r\n<h1 id=\"_introduction\" class=\"sect0\">Introduction</h1>\r\n<div class=\"paragraph\">\r\n<p>This document lists and describes elements of the proposed filespec for a standardised orchestration file format aimed at developers. Operations folks can take the same specfile and deploy their microservices on their orchestration platform. This document tries to identify mappings to existing orchestratoin platforms.</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>A primary goal of OpenCompose is to be inclusive and flexible enough to work with existing platforms and future ones as well.</p>\r\n</div>\r\n<table class=\"tableblock frame-all grid-all spread\">\r\n<caption class=\"title\">Table 1. File Format</caption>\r\n<colgroup>\r\n<col style=\"width: 25%;\">\r\n<col style=\"width: 25%;\">\r\n<col style=\"width: 25%;\">\r\n<col style=\"width: 25%;\">\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th class=\"tableblock halign-left valign-top\"></th>\r\n<th class=\"tableblock halign-left valign-top\">Description</th>\r\n<th class=\"tableblock halign-left valign-top\">Value</th>\r\n<th class=\"tableblock halign-left valign-top\">Note</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><strong>File name</strong></p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">The name of the file created by a developer that follows this specification</p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">&lt;services.yml&gt;</p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">This name is to be confirmed. We are\r\ncurrently using a placeholder (services)</p></td>\r\n</tr>\r\n<tr>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><strong>File Format</strong></p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">The format of the file created by the developer that follows this specification</p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">YAML</p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">See <a href=\"http://yaml.org/\" class=\"bare\">http://yaml.org/</a> for a full specification of the yaml format</p></td>\r\n</tr>\r\n<tr>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><strong>Version</strong></p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">The version of this specification.</p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">0.2</p></td>\r\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">This is currently a pre-alpha proposal and under heavy development</p></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h1 id=\"_element_structure\" class=\"sect0\">Element Structure</h1>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>version: \"0.2\"\r\nservices:\r\n  &lt;Service Name&gt;:\r\n    type: &lt;internal | external&gt;\r\n    image: &lt;Image Name&gt;\r\n    container_name: &lt;Name of Container&gt;\r\n    command:\r\n      - &lt;Executable&gt;\r\n      - &lt;Optional Args&gt;\r\n      - &lt;Optional Args&gt;\r\n      - ...\r\n    environment:\r\n      &lt;Key:Value&gt;\r\n      &lt;Key:Value&gt;\r\n    ports:\r\n       - &lt;Port&gt;\r\n       - &lt;Host:Container&gt;\r\n       - &lt;Protocol:Host:Container&gt;\r\n       - &lt;Protocol::Container&gt;\r\n    volumes:\r\n       - &lt;Volume Name:Container Path&gt;\r\n       - &lt;Container Path&gt;\r\nvolumes:\r\n  VolumeName:\r\n    size: &lt;Size Of Volume&gt;\r\n    mode: &lt;ReadOnlyMany | ReadWriteOnce | ReadWriteMany&gt;</pre>\r\n</div>\r\n</div>\r\n<h1 id=\"_detailed_element_specification\" class=\"sect0\">Detailed Element Specification</h1>\r\n<div class=\"sect3\">\r\n<h4 id=\"_version\">version</h4>\r\n<div class=\"paragraph\">\r\n<p>Version of the specification used.</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>This directive is mandatory.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>version: \"0.1\"</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_services\">services</h4>\r\n<div class=\"paragraph\">\r\n<p><code>services</code> is the main directive and is mandatory with one or more services defined.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>version: \"0.1\"\r\nservices:\r\n  web:\r\n    ...\r\n  db:\r\n    ...</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_type\">type</h4>\r\n<div class=\"paragraph\">\r\n<p>Depending on how a service needs to be exposed a <code>type</code> can be specified in the service definition. The type can be set to <code>external</code> or <code>internal</code>. The orchestration platform can implement the details. For e.g <code>external</code> can translate to <code>LoadBalancer</code> in Kubernetes and <code>internal</code> can translate to <code>ClusterIP</code>.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>version: \"0.2\"\r\n\r\nservices:\r\n  web:\r\n    type: \"external\"\r\n  redis:\r\n    type: \"internal\"</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_image\">image</h4>\r\n<div class=\"paragraph\">\r\n<p>The image from which the container will start. Needs to be a valid image.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>image: awesome-micro-service:v1\r\n\r\nimage: nginx</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_container_name\">container_name</h4>\r\n<div class=\"paragraph\">\r\n<p>Specify a custom container name, rather than a generated default name. This name should be unique within a namespace or else will result in error.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>container_name: app-container</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_command\">command</h4>\r\n<div class=\"paragraph\">\r\n<p>Command to override the default command baked into the container. OpenCompose expects complete command (executable and the optional args) to be specified in a list format.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>  command:\r\n    - python\r\n    - setup.py\r\n    - register</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_environment\">environment</h4>\r\n<div class=\"paragraph\">\r\n<p>List of environment variables to be set in container.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>environment:\r\n  S3_BUCKET: SOME_S3_BUCKET\r\n  API_KEY: XYZABCDE123\r\n  API_SECRET: SFZV3EYT89\r\n  DATABASE_URL: \"postgres://SOME_URL\"</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_ports\">ports</h4>\r\n<div class=\"paragraph\">\r\n<p>Expose ports. It should be list of exposed ports. By default protocol is TCP if not specified. To specify, UDP, prepend with <code>udp</code> &lt;1&gt;. The port should be defined in the following format &lt;protocol&gt;:&lt;host/service&gt;:&lt;container&gt;. When simple port is provided, the same port acts as containerport and hostport &lt;2&gt;.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>ports:\r\n  - tcp:4567:80\r\n  - udp:5000:6000    <b class=\"conum\">(1)</b>\r\n  - tcp:3308:3308\r\n\r\nports:\r\n  - udp:4000:8999\r\n\r\nports:\r\n  - 3000\r\n\r\nports:\r\n  - 3306             <b class=\"conum\">(2)</b>\r\n  - tcp:3306\r\n  - udp:3306\r\n  - 13306:3306\r\n  - tcp:13306:3306\r\n  - udp:13306:3306</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h4 id=\"_volumes\">volumes</h4>\r\n<div class=\"paragraph\">\r\n<p>Declare volumes used by this container service. The declaration can be done in two ways, as named volume and mount path inside container <code>VOLUME_NAME:MOUNT_PATH</code> &lt;1&gt;. The advantages of using named volume is that volume data remains persistent and can be shared with other services.</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>Another way is to define volumes is to specify only mount path inside container <code>MOUNT_PATH</code> &lt;2&gt;. These kind of volumes persists until contianer&#8217;s lifetime.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>volumes:\r\n  - dataVolume:/var/data         <b class=\"conum\">(1)</b>\r\n  - staticPages:/var/www/assets  <b class=\"conum\">(1)</b>\r\n  - /tmp/tmpdata                 <b class=\"conum\">(2)</b></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>When using named volumes define more information of the volume in root level directive called volumes. Inside each volume define <code>size</code> and <code>mode</code> of volume. Size is defined as number and unit Bytes(e.g. <code>1G</code> or <code>300Mi</code>, etc.). Mode is access type of the volume, viz. of three types, <code>ReadWriteOnce</code>, <code>ReadOnlyMany</code> and <code>ReadWriteMany</code>.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>volumes:\r\n  dataVolume:\r\n    size: \"1Gi\"\r\n    mode: ReadWriteMany\r\n  staticPages:\r\n    size: \"5Gi\"\r\n    mode: ReadOnlyMany</pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>Take a look at example below. Here in example see that volume <code>dataVolume</code> is being reused by two services. And extra information of these named volumes is defined in root level <code>volumes</code> directive.</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre>version: \"0.2\"\r\n\r\nservices:\r\n  frontend:\r\n    image: frontend-app:v1.0.1\r\n    volumes:\r\n      - dataVolume:/var/data         # named volume persistent data\r\n      - staticPages:/var/www/assets  # named volume can be reused\r\n\r\n  backend:\r\n    image: backend-app:v1.0.1\r\n    volumes:\r\n      - dataVolume:/app\r\n      - /tmp/tmpdata                 # ephemeral, lasts until container's life\r\n\r\nvolumes:\r\n  dataVolume:\r\n    size: \"1Gi\"\r\n    mode: ReadWriteMany\r\n  staticPages:\r\n    size: \"5Gi\"\r\n    mode: ReadOnlyMany</pre>\r\n</div>\r\n</div>\r\n</div>\r\n<h1 id=\"_open_issues\" class=\"sect0\">Open Issues</h1>\r\n<div class=\"ulist\">\r\n<ul>\r\n<li>\r\n<p><strong>Allow the developer to express that containers should be colocated</strong> In order to ensure the correct functioning of a service or ensure that it performs and is scalable that certain containers are co-located &amp; co-scheduled. In pre-container terms, the processes would have executed on the same VM or bare metal. The developer needs a way to express the colocation of services. Docker compose does not provide this capability, instead requiring the use of filters in Swarm (see <a href=\"https://docs.docker.com/swarm/scheduler/filter/\" class=\"bare\">https://docs.docker.com/swarm/scheduler/filter/</a>. Kubernetes uses pods to express colocation (see &lt;<a href=\"http://kubernetes.io/docs/user-guide/pods/#what-is-a-pod&gt;\" class=\"bare\">http://kubernetes.io/docs/user-guide/pods/#what-is-a-pod&gt;</a>).</p>\r\n</li>\r\n<li>\r\n<p><strong>Allow the developer express minimum capabilities required to run</strong> In order to ensure correct functioning of a service the developer may want to specify required/recommended capabilities (e.g. memory, CPU, disk space). For example, a Java process may require a minimum heap size. Docker Compose allows you to pass options through to the docker container for memory and CPU (see <a href=\"https://docs.docker.com/compose/compose-file/#cpu-shares-cpu-quota-cpuset-domainname-hostname-ipc-mac-address-mem-limit-memswap-limit-privileged-read-only-restart-shm-size-stdin-open-tty-user-working-dir\" class=\"bare\">https://docs.docker.com/compose/compose-file/#cpu-shares-cpu-quota-cpuset-domainname-hostname-ipc-mac-address-mem-limit-memswap-limit-privileged-read-only-restart-shm-size-stdin-open-tty-user-working-dir</a>. Kubernetes implements CPU and memory limits for pods (see <a href=\"http://kubernetes.io/docs/admin/limitrange/\" class=\"bare\">http://kubernetes.io/docs/admin/limitrange/</a> and resource quotas (see &lt;<a href=\"http://kubernetes.io/docs/admin/resourcequota/&gt;\" class=\"bare\">http://kubernetes.io/docs/admin/resourcequota/&gt;</a>).</p>\r\n</li>\r\n<li>\r\n<p><strong>Allow specification file format innovation</strong> In order to allow OpenCompose implementations and users to innovate we want to allow additional elements to be added to the file that an implementation may use to expose additional capabilities such as features not covered by open compose, new features proposed for a later revision of OpenCompose, or instructions passed to an extension model.</p>\r\n</li>\r\n<li>\r\n<p><strong>Allow the developer to express replication capabilities</strong> A developer may wish to indicate that a container can be replicated 0 &#8230;&#8203; N times for horizontal scaling and still have the application correctly function. This should be specified.</p>\r\n</li>\r\n<li>\r\n<p><strong>Allow the developer or application delivery team to overlay additional elements</strong> Different stages of the software development lifecycle may be handled by different people, or by the same person wearing different hats. In order to support this we should support an overlay model</p>\r\n</li>\r\n</ul>\r\n</div>\r\n</div>\r\n<div id=\"footer\">\r\n<div id=\"footer-text\">\r\nLast updated 2016-11-04 18:08:32 IST\r\n</div>\r\n</div>\r\n</body>\r\n</html>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}